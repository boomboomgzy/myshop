"""
Django settings for myshop project.

Generated by 'django-admin startproject' using Django 4.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
from unittest.mock import DEFAULT


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# in gzy win BASE_DIR == G:\vscode\webproject\myshop

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-44z+)qx3ybe*mqghf@1wjtffnmlme=72#4y_b=krp)2jj0sv)q'



# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
#日志器名称
LOGGER_NAME='django'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 是否禁用已经存在的日志器

    # 日志信息显示的格式
    'formatters': {
        'verbose': {
            'format': '%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s'
        },
        'simple': {
            'format': '%(levelname)s %(module)s %(lineno)d %(message)s'
        },
    },

    # 对日志进行过滤
    'filters': {
        'require_debug_true': {  # django在debug模式下才输出日志
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },

    # 日志处理方法
    'handlers': {

        # 向终端中输出日志
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },

        # 向文件中输出日志
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',

            # 日志文件的位置
            'filename': os.path.join(BASE_DIR,'logs/myshop.log'),
            'encoding': 'gbk',
            'maxBytes': 30 * 1024 *1024,
            'backupCount': 10,
            'formatter': 'verbose'
        },
    },

    # 日志器
    'loggers': {
        LOGGER_NAME: {  # 定义了一个名为django的日志器
            'handlers': ['file'],  # 只向文件中输出日志
            'propagate': True,  # 是否继续传递日志信息
            'level': 'INFO',  # 日志器接收的最低日志级别
        },
    }
}



# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    #定时任务
    'django_crontab',
    #myshop     
    'myshop.apps.users',
    'myshop.apps.verifications',   
    'myshop.apps.areas',
    'myshop.apps.contents',   
    'myshop.apps.goods',   
    'myshop.apps.payment',
    'myshop.apps.orders',
    'myshop.apps.carts',
    'myshop.apps.oauth',
    #检索
    'haystack',

]

MIDDLEWARE = [
    #cors
    'corsheaders.middleware.CorsMiddleware',
    
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    #异常处理中间件
    'myshop.utils.middlewares.ExceptionMiddleware'
    
]

ROOT_URLCONF = 'myshop.urls'

TEMPLATES = [
        # jinja2 模板引擎
    {
        'BACKEND': 'django.template.backends.jinja2.Jinja2',  # 换成jinja2模板引擎
        'DIRS': [os.path.join(BASE_DIR,'myshop','templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],

            # 补充Jinja2模板引擎环境
            'environment': 'myshop.utils.jinja2_env.jinja2_environment',
        },
    },
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR,'myshop','templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myshop.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
        'default':{
        'ENGINE': 'django.db.backends.mysql',
        'HOST': 'db', # 注意：这里使用的是db别名，docker会自动解析成ip
        'PORT':'3306', # 端口
        'USER': 'gzy',
        'PASSWORD': '1',
        'NAME': 'myshop',
        }
}
#docker容器 主从数据库配置
""" DATABASES = {
    'default': { # 写（主机）
        'ENGINE': 'django.db.backends.mysql', # 数据库引擎
        'HOST': '127.0.0.1', # 数据库主机
        'PORT': 3310, # 数据库端口
        'USER': 'root', # 数据库用户名
        'PASSWORD': '123456', # 数据库用户密码
        'NAME': 'myshop' # 数据库名字
    },
    'slave': { # 读（从机）
        'ENGINE': 'django.db.backends.mysql',
        'HOST': '127.0.0.1',
        'PORT': 3311,
        'USER': 'root',
        'PASSWORD': '123456',
        'NAME': 'myshop'
    }
} 
DATABASE_ROUTERS = ['myshop.utils.db_router.MasterSlaveDBRouter']
"""
# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR,'static')
STATICFILES_DIRS=[os.path.join(BASE_DIR,'myshop','static')]

DEFAULT_FILE_STORAGE='myshop.utils.minio.minio_storage.MinioStorage'

#minio 
MINIO_BASE_URL='minio/images'
MINIO_ACCESSKEY='minio'
MINIO_SECRETKEY='minio@123'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 缓存别名
DEFAULT_CACHE_ALIAS = 'default'
SESSION_CACHE_ALIAS = "session"
VERIFY_CODE_CACHE_ALIAS = 'verify_code'
HISTORY_CACHE_ALIAS = 'history'
CARTS_CACHE_ALIAS = 'carts'


#django-redis 配置

REDIS_URI='redis://:1@redis:6379'

CACHES = {
    DEFAULT_CACHE_ALIAS: {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_URI}/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },    
    SESSION_CACHE_ALIAS: {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_URI}/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    VERIFY_CODE_CACHE_ALIAS: {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_URI}/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    CARTS_CACHE_ALIAS:{
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"{REDIS_URI}/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    
    
}

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

#替换内置user
AUTH_USER_MODEL='users.User'

ALLOWED_HOSTS = ['*']

#CORS 配置

# CORS_ALLOWED_ORIGINS=(
    # 'http://127.0.0.1:8000',
    # 'http://localhost:8000',
# )

#允许携带cookie
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True

CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
 
CORS_ALLOW_HEADERS = (
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

AUTHENTICATION_BACKENDS=['myshop.utils.backend.UserNameAndEmailBackend'] 

#未登录用户的默认跳转路由 
LOGIN_URL = '/users/login' 
  
#邮箱配置
EMAIL_BACKEND='django.core.mail.backends.smtp.EmailBackend'
EMAIL_FROM='myshop<3228352301@qq.com>'
EMAIL_HOST='smtp.qq.com'
EMAIL_PORT=25
EMAIL_HOST_USER='3228352301@qq.com'
EMAIL_HOST_PASSWORD='bikhlxckzbewdaca'
EMAIL_USE_TLS = True #必须为true
EMAIL_USE_SSL = False
EMAIL_SSL_CERTFILE = None
EMAIL_SSL_KEYFILE = None
EMAIL_TIMEOUT = None
# 邮箱验证链接
EMAIL_VERIFY_URL = 'http://192.168.9.102/users/emails/verifications/'


#itsdangerous密钥
ITSDANGEROUS_SECRET_KEY='367ee6cfd1704c0b786d3407b130c8f7'


# alipay 沙箱 appid
ALIPAY_APPID='2021000119612597'

#app私钥路径
APP_PRIVATE_KEY_PATH=os.path.join(BASE_DIR,'myshop/apps/payment/keys/myshop_private_key.pem')

#app公钥路径
APP_PUBLIC_KEY_PATH=os.path.join(BASE_DIR,'myshop/apps/payment/keys/myshop_public_key.pem')

#alipay公钥路径
ALIPAY_PUBLIC_KEY_PATH=os.path.join(BASE_DIR,'myshop/apps/payment/keys/alipay_public_key.pem')

#alipay 沙箱调试模式开关
ALIPAY_DEBUG=True

# alipay页面url
ALIPAY_URL='https://openapi.alipaydev.com/gateway.do'
# alipay 支付完成后回调的url
ALIPAY_RETURN_URL='http://192.168.9.102/payment/status'


#baidu API_KEY
BAIDU_API_KEY='RevevWVQYGKp2zevbBAvdo7A'
#baidu SECRET_KEY
BAIDU_SECRET_KEY='viTPvS11G2kEKhkvwxxEaxilyTvGy37G'
#baidu 处理百度登录uri
BAIDU_REDIRECT_URI='http://175.178.121.75/oauth/baidu/oauth_backend/'
#baidu scope参数
BAIDU_SCOPE='basic'
#baidu登录页
BAIDU_LOGIN_URL=f'https://openapi.baidu.com/oauth/2.0/authorize?response_type=code&client_id={BAIDU_API_KEY}&redirect_uri={BAIDU_REDIRECT_URI}'
#baidu refresh token
BAIDU_REFRESH_TOKEN=''


HAYSTACK_CONNECTIONS = {
    'default': {
        'ENGINE': 'haystack.backends.elasticsearch7_backend.Elasticsearch7SearchEngine',
        'URL': 'http://192.168.9.102:9200/', # Elasticsearch服务器ip地址，端口号固定为9200
        'INDEX_NAME': 'myshop', # Elasticsearch建立的索引库的名称
    },
}
# 当添加、修改、删除数据时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# 用于决定每页显示数据条数: 
HAYSTACK_SEARCH_RESULTS_PER_PAGE = 5

#定时任务(windows下不能使用)
CRONJOBS=(
    #每1分钟生成一次首页静态文件
    ('*/1 * * * *','myshop.apps.contents.crons.generate_static_index_html','>> '+os.path.join(BASE_DIR,'logs/crontab.log')),
)

# 指定中文编码格式
CRONTAB_COMMAND_PREFIX = 'LANG_ALL=zh_cn.UTF-8'
